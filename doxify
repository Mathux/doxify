#!/bin/bash

# Safety
#---------------
set -e

# Variables
#---------------
SCRIPT_PATH=`basename \`readlink -f $0\``
SCRIPT_DIR=`dirname \`readlink -f $0\``


#------------------------------------------------------------------------------
#                                  USAGE
#------------------------------------------------------------------------------
usage ()
{
    echo "$SCRIPT_PATH <sources_dir> [output dir]"
}

#------------------------------------------------------------------------------
#                           IS DOXYGEN PRESENT
#------------------------------------------------------------------------------
isDoxygenPresent ()
{
    # is doxygen present ?
    # (disable script safety first)
    set +e
    local which_output=$(which doxygen)
    # reenable script safety
    set -e
    if [ "$?" -ne 0 ]; then
        # not present, must install doxygen !
        echo "[ERROR] - Doxgen executable not found : $which_output. Please install it."
        exit 1
    fi
    # doxygen present
}

#------------------------------------------------------------------------------
#                       GENERATE DEFAULT DOXYFILE
#------------------------------------------------------------------------------
generateDefaultDoxyfile ()
{
    local output_dir="$1"
    # generate default doxygen config file
    cd $output_dir && doxygen -g
    cd $OLDPWD
}

#------------------------------------------------------------------------------
#                           SET DOXYFILE VARIABLE
#------------------------------------------------------------------------------
setDoxyfileVariable ()
{
    local doxyfile_path="$1"
    local variable="$2"
    local value="$3"
    # remove the matched line
    sed -i -e "/$variable/d" "$doxyfile_path"
    # add it again with the appropriate value
    echo "$variable = $value" >> "$doxyfile_path"
}


#------------------------------------------------------------------------------
#                               MAGNIFY DOXYFILE
#------------------------------------------------------------------------------
magnifyDoxyfile ()
{
    local doxyfile="$1"
    local sources_dir="$2"
    local output_dir="$3"
    # Magnify
    #------------------
    setDoxyfileVariable "$doxyfile_path" 'CREATE_SUBDIRS' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'EXTRACT_ALL' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'EXTRACT_PRIVATE' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'EXTRACT_STATIC' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'EXTRACT_LOCAL_METHODS' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'EXTRACT_ANON_NSPACES' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'FORCE_LOCAL_INCLUDES' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'RECURSIVE' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'SOURCE_BROWSER' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'INLINE_SOURCES' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'REFERENCED_BY_RELATION' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'REFERENCES_RELATION' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'HTML_DYNAMIC_SECTIONS' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'GENERATE_TREEVIEW' 'YES'
    setDoxyfileVariable "$doxyfile_path" 'MACRO_EXPANSION' 'YES'
    # is dot present ?
    # (disable script safety first)
    set +e
    local which_output=$(which dot)
    # reenable script safety
    set -e
    if [ "$?" -eq 0 ]; then
        # Dot is present
        setDoxyfileVariable "$doxyfile_path" 'HAVE_DOT' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'UML_LOOK' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'TEMPLATE_RELATIONS' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'CALL_GRAPH' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'CALLER_GRAPH' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'INTERACTIVE_SVG' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'DOT_TRANSPARENT' 'YES'
        setDoxyfileVariable "$doxyfile_path" 'DOT_MULTI_TARGETS' 'YES'
    else
        echo "[WARNING] - Dot not available. Cloud not generate nice diagrams."
    fi

    # INPUT and OUTPUT
    #------------------
    setDoxyfileVariable "$doxyfile_path" 'INPUT' "$sources_dir"
    setDoxyfileVariable "$doxyfile_path" 'OUTPUT_DIRECTORY' "$output_dir"
}

#------------------------------------------------------------------------------
#                                  MAIN
#------------------------------------------------------------------------------
main ()
{
    # Parse args
    #-------------------
    # at least one argument ?
    if [ $# -lt 1 ]; then
        usage
        exit 0
    fi
    # yes
    local sources_dir="$(readlink -f $1)"
    # second optional argument ?
    local output_dir=""
    if [ $# -eq 2 ]; then
        local output_dir="$(readlink -f $2)" 
    fi
    isDoxygenPresent
    generateDefaultDoxyfile "$output_dir"
    local doxyfile_path=$(readlink -f $output_dir/Doxyfile)
    magnifyDoxyfile "$doxyfile_path" "$sources_dir" "$output_dir"
    # Generate Documentation
    doxygen "$output_dir"/Doxyfile
}

# entrypoint
#------------
main $@
